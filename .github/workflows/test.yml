name: HackerNews API Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: false
        default: 'STAGE'
        type: choice
        options:
          - STAGE
          - PROD
      test_path:
        description: 'Test path (optional)'
        required: false
        default: 'tests/'
        type: string

permissions:
  checks: write
  contents: read

env:
  DOCKER_IMAGE: hackernews-api-test

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --with dev --no-root

      - name: Run Black formatter check
        run: poetry run black --check .

      - name: Run Ruff linter
        run: poetry run ruff check .

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t ${{ env.DOCKER_IMAGE }} .

      - name: Run tests with JUnit XML output
        run: |
          mkdir -p test-results
          docker run --rm \
            -e ENV=${{ github.event.inputs.environment || 'STAGE' }} \
            -v $(pwd)/test-results:/hackernews-api-test/test-results \
            ${{ env.DOCKER_IMAGE }} \
            pytest ${{ github.event.inputs.test_path || 'tests/' }} \
              --junitxml=test-results/junit_report.xml \
              --tb=short \
              -v

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 30

  publish_report:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: test-results

      - name: Publish JUnit XML Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: HackerNews API Test Report
          path: test-results/junit_report.xml
          reporter: java-junit
          fail-on-error: false