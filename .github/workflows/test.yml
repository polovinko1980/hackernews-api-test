name: HackerNews API Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: hackernews-api-test

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }} .

      - name: Save Docker image
        run: |
          docker save ${{ env.DOCKER_IMAGE }} | gzip > hackernews-api-test.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: hackernews-api-test.tar.gz
          retention-days: 1

  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        environment: [PROD, STAGE]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          docker load < hackernews-api-test.tar.gz

      - name: Run tests with JUnit XML output
        run: |
          mkdir -p test-results
          docker run --rm \
            -e ENV=${{ matrix.environment }} \
            -v $(pwd)/test-results:/hackernews-api-test/test-results \
            ${{ env.DOCKER_IMAGE }} \
            pytest tests/ \
              --junitxml=test-results/junit_report_${{ matrix.environment }}.xml \
              --tb=short \
              -v

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.environment }}
          path: test-results/
          retention-days: 30

  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          docker load < hackernews-api-test.tar.gz

      - name: Run Black formatter check
        run: |
          docker run --rm ${{ env.DOCKER_IMAGE }} poetry run black --check .

      - name: Run Ruff linter
        run: |
          docker run --rm ${{ env.DOCKER_IMAGE }} poetry run ruff check .

  publish_report:
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    strategy:
      matrix:
        environment: [PROD, STAGE]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results-${{ matrix.environment }}
          path: test-results

      - name: Publish JUnit XML Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: HackerNews API Test Report (${{ matrix.environment }})
          path: test-results/junit_report_${{ matrix.environment }}.xml
          reporter: java-junit
          fail-on-error: false

  summary:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "Build Status: ${{ needs.test.result }}"
          echo "Lint Status: ${{ needs.lint.result }}"
          
          if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.lint.result }}" == "failure" ]]; then
            echo "❌ Some checks failed"
            exit 1
          else
            echo "✅ All checks passed"
          fi